###BOUNCING BALL GAME
  ##USING OBJECTIVE POINTS FROM https://www.freecodecamp.org/news/pygame-tutorial-build-a-bouncing-game/

  ##PLATFORM MOVEMENT
    #MOVE LEFT AND RIGHT FROM KEYS
    #CANT MOVE OFF SCREEN
  
  ##BALL BOUNCE
    #BALL BOUNCE OFF WALL AND PLATFORM
    #POINT INCREASE WHEN BOUNCE OFF PLATFORM
  
  ##SCORE SYSTEM
    #SCORE INCREASES AFTER BOUNCE OFF PLATFORM

##-------------------------------------------------------##

###POTENTIAL OTHERS
  ##LEVELS
  ##DYNAMIC PLATFORM COLOUR
  ##LIVES AND GAME OVER
    #RESPAWN BALL LIMITED NUMBER OF TIMES
    #GAME OVER AFTER THAT MANY TIMES
    #RESET SCORE AFTER GAME OVER

##-------------------------------------------------------##

import pygame
import sys
import time
import random

pygame.init()
screen = pygame.display.set_mode((500, 700))
pygame.display.set_caption("Bouncing Ball Game")

# Clock to control frame rate
clock = pygame.time.Clock()
clock.tick(60)

#platform constants:
px = 210
py = 600
pWidth = 80
pHeight = 20
pVel = 7.5

#ball constants:
#adds some randomness to the beginning
#since previously it was repetative and predictable 
bx = random.randrange(100, 400)
by = 350
bRad = 15
bVelx = 5
bVely = 5

score = 0

run = True
while run:
    pygame.time.delay(50)
    for event in pygame.event.get():
        #checks if window closed to allow it to close when cross clicked
        if event.type == pygame.QUIT: 
            run = False
            
    #check if a key is pressed
    keys = pygame.key.get_pressed()
    
    #makes a boundary so platform can't go off screen
    #and makes left and right arrow keys control platform
    if keys[pygame.K_LEFT] and px > pVel:
        px -= pVel
        
    if keys[pygame.K_RIGHT] and px < 500 - pVel - pWidth:
        px += pVel

    screen.fill((0,0,0))
    
    #draws the rectangle of the platform
    pygame.draw.rect(screen, (255,0,0), (px, py, pWidth, pHeight))
    pygame.display.update()

    #to move ball
    bx += bVelx
    by += bVely

    #draws ball
    pygame.draw.circle(screen, (0,255,0), (bx, by), bRad)
    pygame.display.update()

    #draw obstacles
    def obstacles(x, y, bVely):
        pygame.draw.rect(screen, (255,0,0), (x, y, 20, 20))
        pygame.display.update()

        if (x - bRad <= bx <= x + bRad + 20
            and y - bRad <= by <= y + bRad + 20):
            bVely = -bVely
            
        return bVely
       
        
    #creates 5 obstacles
    bVely = obstacles(100, 100, bVely)
    bVely = obstacles(170, 100, bVely)
    bVely = obstacles(240, 100, bVely)
    bVely = obstacles(310, 100, bVely)
    bVely = obstacles(380, 100, bVely)

    #bounce off edges and platform
    if bx - bRad <= 0 or bx + bRad >= 500:
        bVelx = -bVelx  
    if by - bRad <= 0 or by + bRad >= 700:
        bVely = -bVely
    if (px - bRad <= bx <= px + bRad + pWidth
        and py - bRad <= by <= py + bRad + pHeight):
        bVely = -bVely
        score += 1
        #increases speed every time the ball hits the platform
        if bVely > 0:
            bVelx += 1
            bVely += 1
        else:
            bVelx -= 1
            bVely -= 1
            
    #ends run if the ball hits the bottom border   
    if by + bRad >= 700:
        gameOver = font.render("Game Over", True, (255,255,255))
        screen.blit(gameOver, (200, 350))
        pygame.display.flip()
        pygame.display.update()
        time.sleep(5)
        run = False
        
    #displays score
    font = pygame.font.Font("freesansbold.ttf", 20)
    scoreText = font.render("Score: {0}".format(score) ,True,(255,255,255))
    screen.blit(scoreText, (50, 50))
    pygame.display.flip()
    pygame.display.update()

        
pygame.quit()




